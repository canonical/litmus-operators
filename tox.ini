# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = integration, fmt

[vars]
uv_flags = --frozen --isolated
tst_path = {toxinidir}/tests/

[testenv]
allowlist_externals = uv
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH

  # for integration tests
  BACKEND_CHARM_CHANNEL
  AUTH_CHARM_CHANNEL
  CHAOSCENTER_CHARM_CHANNEL
  AUTH_CHARM_PATH
  BACKEND_CHARM_PATH
  CHAOSCENTER_CHARM_PATH


[testenv:unit]
description = Run unit tests for all components
setenv =
  PYTHONPATH = {toxinidir}
allowlist_externals =
    tox
    uv
    cp
commands =
    uv run {[vars]uv_flags} --group unittest coverage run --source=. --data-file=.coverage.root -m pytest \
        {toxinidir}/tests/unit {posargs}
    tox -c backend/tox.ini --root backend -e unit
    tox -c auth/tox.ini --root auth -e unit
    tox -c chaoscenter/tox.ini --root chaoscenter -e unit
    # cmd fails with ERROR: Package 'litmus-libs' requires a different Python: 3.10.12 not in '<4,>=3.12'
    # TODO: use a 24.04 runner?
    # tox -c libs/tox.ini --root libs -e unit

    cp backend/.coverage {toxinidir}/.coverage.backend
    cp auth/.coverage {toxinidir}/.coverage.auth
    cp chaoscenter/.coverage {toxinidir}/.coverage.chaoscenter
    # cp libs/.coverage {toxinidir}/.coverage.libs

    uv run {[vars]uv_flags} --group unittest coverage combine
    uv run {[vars]uv_flags} --group unittest coverage report
[testenv:fmt]
description = Format all components
setenv =
  PYTHONPATH = {toxinidir}
allowlist_externals =
    tofu
    tox
    uv
commands =
    # format the tests
    uv run --with ruff --all-extras ruff format {[vars]tst_path}
    uv run --with ruff --all-extras ruff check --fix-only {[vars]tst_path}
    # format all components and the shared libs
    tox -c backend/tox.ini --root backend -e fmt
    tox -c auth/tox.ini --root auth -e fmt
    tox -c chaoscenter/tox.ini --root chaoscenter -e fmt
    tox -c libs/tox.ini --root libs -e fmt
    # terraform files formatting; requires opentofu snap (classic)
    tofu fmt -recursive

[testenv:static]
description = Static checks on all components
setenv =
  PYTHONPATH = {toxinidir}
allowlist_externals =
    tox
    uv
commands =
    tox -c backend/tox.ini --root backend -e static
    tox -c auth/tox.ini --root auth -e static
    tox -c chaoscenter/tox.ini --root chaoscenter -e static

    # we can't rely on ./libs' own tox -e static because we're importing charm libs that are only
    # present in other folders in this monorepo
    uv run --group type-checking pyright ./libs/src


[testenv:lock]
description = Refresh libs and update locks for all components
setenv =
  PYTHONPATH = {toxinidir}
allowlist_externals =
    tox
    uv
    bash
commands =
    # update toplevel lock
    uv lock --upgrade --no-cache

    # update all components and shared libs locks
    tox -c backend/tox.ini --root backend -e lock
    tox -c auth/tox.ini --root auth -e lock
    tox -c chaoscenter/tox.ini --root chaoscenter -e lock
    tox -c libs/tox.ini --root libs -e lock


[testenv:integration]
description = "Run integration tests"
setenv =
  PYTHONPATH = {toxinidir}
commands =
    uv run {[vars]uv_flags} --group integration-tests pytest --exitfirst {[vars]tst_path}integration {posargs}


[testenv:terraform]
description = Run terraform tests
commands =
    uv run {[vars]uv_flags} pytest --exitfirst {[vars]tst_path}/terraform {posargs}
