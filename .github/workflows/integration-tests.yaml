name: Integration Tests

on:
  pull_request:
    branches:
      - main
      - track/**
  push:
    branches:
      - main
      - track/**

jobs:
  modes-matrix:
    name: Detect changed files and determine which tests to run
    runs-on: ubuntu-latest
    outputs:
      modes: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
      # check auth changes
      - name: Determine changed files in the auth component
        id: auth-changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: auth/**
          files_ignore: |
            README.md
            CONTRIBUTING.md
            INTEGRATING.md
            CODEOWNERS
            LICENSE
            icon.svg
            .gitignore
            .github/**

      # check backend changes
      - name: Determine changed files in the backend component
        id: backend-changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: backend/**
          files_ignore: |
            README.md
            CONTRIBUTING.md
            INTEGRATING.md
            CODEOWNERS
            LICENSE
            icon.svg
            .gitignore
            .github/**

      # check chaoscenter changes
      - name: Determine changed files in the chaoscenter component
        id: chaoscenter-changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: chaoscenter/**
          files_ignore: |
            README.md
            CONTRIBUTING.md
            INTEGRATING.md
            CODEOWNERS
            LICENSE
            icon.svg
            .gitignore
            .github/**
            
      # check top-level changes
      - name: Determine changed files in the top-level tests
        id: tests-changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: tests/**
          files_ignore: |
            README.md
            CONTRIBUTING.md
            INTEGRATING.md
            CODEOWNERS
            LICENSE
            icon.svg
            .gitignore

      - name: Determine test modes matrix
        id: set-matrix
        run: |
          if [[ "${{ steps.auth-changed-files.outputs.any_modified }}" == "true" ]]; then
            modes+=("local-auth")
          fi
          if [[ "${{ steps.backend-changed-files.outputs.any_modified }}" == "true" ]]; then
            modes+=("local-backend")
          fi
          if [[ "${{ steps.chaoscenter-changed-files.outputs.any_modified }}" == "true" ]]; then
            modes+=("local-chaoscenter")
          fi

          # detect "all" mode if top-level tests changed OR all components' files have been modified
          if [[ "${{ steps.tests-changed-files.outputs.any_modified }}" == "true" || ${#modes[@]} -eq 3 ]]; then
            modes+=("local-all")
          fi
          # convert to JSON array
          matrix=$(printf '%s\n' "${modes[@]}" | grep -v '^$' | jq -r -ncR '[inputs]')
          echo "matrix=$matrix"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  pack-charms:
      name: Pack The Charms
      needs: [modes-matrix]
      if: ${{ needs.modes-matrix.outputs.modes != '[]' }}
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Setup LXD
          uses: canonical/setup-lxd@main
        - name: Install charmcraft
          run: sudo snap install charmcraft --classic
        - name: Cache wheels
          uses: actions/cache@v4
          with:
              path: /home/runner/snap/charmcraft/common/cache/charmcraft
              key: ${{ runner.os }}-wheel-cache-${{ hashFiles('./uv.lock') }}
              # If the above cache key doesn't match, it's because the uv.lock has changed.
              # Even so, pre-existing caches may still contain useful cached builds for some
              # portion of the dependencies, and restore-keys can partially match a cache.
              restore-keys: |
                  ${{ runner.os }}-wheel-cache-
        - name: Run charmcraft pack on the auth component
          run: |
            cd auth
            charmcraft pack -v
        - name: Run charmcraft pack on the backend component
          run: |
            cd backend
            charmcraft pack -v
        - name: Run charmcraft pack on the chaoscenter component
          run: |
            cd chaoscenter
            charmcraft pack -v
        - name: Upload auth charm artifact
          uses: actions/upload-artifact@v4
          with:
            name: auth-charms-tests
            path: auth/*.charm
        - name: Upload backend charm artifact
          uses: actions/upload-artifact@v4
          with:
            name: backend-charms-tests
            path: backend/*.charm
        - name: Upload chaoscenter charm artifact
          uses: actions/upload-artifact@v4
          with:
            name: chaoscenter-charms-tests
            path: chaoscenter/*.charm
  integration-matrix:
    name: Define Integration Tests Matrix
    runs-on: ubuntu-latest
    needs: [pack-charms]
    outputs:
      suites: ${{ steps.suites.outputs.suites }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate matrix list
        id: suites
        run: |
          # A space-separated list of directories containing integration tests
          integration_tests_paths="tests/integration tests/terraform"
          list="$(find $integration_tests_paths -name 'test_*.py' -printf '%f\n' | jq -r -ncR '[inputs]')"
          echo "suites=$list"
          echo "suites=$list" >> "$GITHUB_OUTPUT"

  integration-test:
    name: Integration Tests (${{ matrix.mode }} | ${{ matrix.suite }})
    runs-on: ubuntu-latest
    needs: [modes-matrix, pack-charms, integration-matrix]
    strategy:
      fail-fast: false
      matrix:
        suite: ${{ fromJSON(needs.integration-matrix.outputs.suites) }}
        # Run the solution-level integration tests in the following deployment modes.
        mode: ${{ fromJson(needs.modes-matrix.outputs.modes) }}
    env:
      CONCIERGE_JUJU_CHANNEL: 3.6/stable
      CONCIERGE_MICROK8S_CHANNEL: 1.32-strict/stable
      CONCIERGE_CHARMCRAFT_CHANNEL: 3.x/candidate
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo snap install concierge --classic
          sudo concierge prepare -p microk8s --extra-snaps=astral-uv,terraform
          sudo snap install kubectl --classic
          juju model-defaults automatically-retry-hooks=true
      - name: Download auth charm artifact
        uses: actions/download-artifact@v4
        with:
          name: auth-charms-tests
          path: ./auth
      - name: Download backend charm artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-charms-tests
          path: ./backend
      - name: Download chaoscenter charm artifact
        uses: actions/download-artifact@v4
        with:
          name: chaoscenter-charms-tests
          path: ./chaoscenter
      - name: Run integration tests
        run: |
          auth_relative_path="$(find ./auth -maxdepth 1 -name '*.charm' | tail -n1)"
          backend_relative_path="$(find ./backend -maxdepth 1 -name '*.charm' | tail -n1)"
          chaoscenter_relative_path="$(find ./chaoscenter -maxdepth 1 -name '*.charm' | tail -n1)"
          channel="2/edge"
          if [ "${{ matrix.mode }}" = "local-auth" ]; then
            AUTH_CHARM_PATH="$(realpath "$auth_relative_path")"
            export AUTH_CHARM_PATH
            BACKEND_CHARM_CHANNEL="$channel"
            CHAOSCENTER_CHARM_CHANNEL="$channel"
            export BACKEND_CHARM_CHANNEL
            export CHAOSCENTER_CHARM_CHANNEL
          elif [ "${{ matrix.mode }}" = "local-backend" ]; then
            BACKEND_CHARM_PATH="$(realpath "$backend_relative_path")"
            export BACKEND_CHARM_PATH
            AUTH_CHARM_CHANNEL="$channel"
            CHAOSCENTER_CHARM_CHANNEL="$channel"
            export AUTH_CHARM_CHANNEL
            export CHAOSCENTER_CHARM_CHANNEL
          elif [ "${{ matrix.mode }}" = "local-chaoscenter" ]; then
            CHAOSCENTER_CHARM_PATH="$(realpath "$chaoscenter_relative_path")"
            export CHAOSCENTER_CHARM_PATH
            AUTH_CHARM_CHANNEL="$channel"
            BACKEND_CHARM_CHANNEL="$channel"
            export AUTH_CHARM_CHANNEL
            export BACKEND_CHARM_CHANNEL
          elif [ "${{ matrix.mode }}" = "local-all" ]; then
            AUTH_CHARM_PATH="$(realpath "$auth_relative_path")"
            export AUTH_CHARM_PATH
            BACKEND_CHARM_PATH="$(realpath "$backend_relative_path")"
            export BACKEND_CHARM_PATH
            CHAOSCENTER_CHARM_PATH="$(realpath "$chaoscenter_relative_path")"
            export CHAOSCENTER_CHARM_PATH
          else
            echo "Unknown mode: ${{ matrix.mode }}"
            exit 1
          fi
          uvx tox -e integration -- -k "${{ matrix.suite }}"

  terraform-deploy-tests:
    name: Run terraform deployment tests
    uses: canonical/observability/.github/workflows/run-tox-environment.yaml@main
    with:
      tox-env-name: terraform-deploy
      prepare-host-env: true
      extra-snaps: terraform
    secrets: inherit